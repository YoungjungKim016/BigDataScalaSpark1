build.sbt:
------------------------------------------------------------------------------------------------------------------------------------------------------------
name := "TwitterSparkStreaming"

version := "0.1"

scalaVersion := "2.11.12"

// https://mvnrepository.com/artifact/org.apache.spark/spark-streaming-twitter
libraryDependencies += "org.apache.spark" %% "spark-streaming-twitter" % "1.6.3"

// https://mvnrepository.com/artifact/org.apache.spark/spark-core
libraryDependencies += "org.apache.spark" %% "spark-core" % "1.6.3"

// https://mvnrepository.com/artifact/org.apache.spark/spark-sql
libraryDependencies += "org.apache.spark" %% "spark-sql" % "1.6.3"

// https://mvnrepository.com/artifact/org.apache.spark/spark-mllib
libraryDependencies += "org.apache.spark" %% "spark-mllib" % "1.6.3"

// https://mvnrepository.com/artifact/org.apache.spark/spark-streaming
libraryDependencies += "org.apache.spark" %% "spark-streaming" % "1.6.3"

libraryDependencies += "com.typesafe" % "config" % "1.3.0"
libraryDependencies += "org.twitter4j" % "twitter4j-core" % "3.0.3"
libraryDependencies += "org.twitter4j" % "twitter4j-stream" % "3.0.3"




------------------------------------------------------------------------------------------------------------------------------------------------------------
Code1:
------------------------------------------------------------------------------------------------------------------------------------------------------------
import twitter4j.TwitterFactory
import twitter4j.auth.AccessToken
import twitter4j.Query

object TwitterSpark1 extends App {
  val twitter = new TwitterFactory().getInstance()
  // Authorising with your Twitter Application credentials
  twitter.setOAuthConsumer("4j1vZyNtJ1xBwjgP3mFJGTrZX",
    "5aGlcIQNGxpmPXp50zc8EYVUvDk0Id8aPGG71nRF6DnJIL26ta")
  twitter.setOAuthAccessToken(new AccessToken("914392218365919232-1VxlGCh2Q3PkjlmptLEEZkjNArbQkxp",
    "nSEp0odDxhYiM2pyICLzx6fyFOkE1sfGfBh31XDK1TgsJ"))

  //Querying the Twitter
  val query = new Query("Covid India");
  val result = twitter.search(query)
  println("Tweetes Found" + result.getTweets)

  // Capturing the Tweets from your timeline
  val statuses = twitter.getHomeTimeline

//Posting a Tweet
twitter.updateStatus("Hello , This is a sample tweet")



}


------------------------------------------------------------------------------------------------------------------------------------------------------------
Code2:
------------------------------------------------------------------------------------------------------------------------------------------------------------
import org.apache.log4j.{Level, Logger}
import org.apache.spark.SparkConf
import org.apache.spark.streaming.twitter.TwitterUtils
import org.apache.spark.streaming.{Seconds, StreamingContext}
import twitter4j.TwitterFactory
import twitter4j.conf.ConfigurationBuilder

object TwitterSpark2 {
  def main(args : Array[String]) {

    val sparkConf = new SparkConf().setAppName("TwitterSpark2").setMaster("local[*]")
    val ssc = new StreamingContext(sparkConf, Seconds(10))
    println(ssc.getState())

    if (!Logger.getRootLogger.getAllAppenders.hasMoreElements) {
      Logger.getRootLogger.setLevel(Level.WARN)
    }
    // (1) config work to create a twitter object
    val cb = new ConfigurationBuilder()
    cb.setDebugEnabled(true)
      .setOAuthConsumerKey("4j1vZyNtJ1xBwjgP3mFJGTrZX")
      .setOAuthConsumerSecret("5aGlcIQNGxpmPXp50zc8EYVUvDk0Id8aPGG71nRF6DnJIL26ta")
      .setOAuthAccessToken("914392218365919232-1VxlGCh2Q3PkjlmptLEEZkjNArbQkxp")
      .setOAuthAccessTokenSecret("nSEp0odDxhYiM2pyICLzx6fyFOkE1sfGfBh31XDK1TgsJ")
    val tf = new TwitterFactory(cb.build())
    val twitter = tf.getInstance().getAuthorization()
    println(twitter)

    val stream = TwitterUtils.createStream(ssc, Some(twitter))
    stream.print()

    ssc.start()
    ssc.awaitTerminationOrTimeout(10000)
    ssc.stop()
  }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------